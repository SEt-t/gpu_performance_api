//==============================================================================
// Copyright (c) 2010-2023 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief DX11 counter definitions for GFX6.
//==============================================================================

#include "gpu_perf_api_counter_generator/gpa_counter.h"
#include "auto_generated/gpu_perf_api_counter_generator/gpa_hw_counter_gfx6.h"
#include "auto_generated/gpu_perf_api_counter_generator/gpa_hw_counter_dx11_gfx6.h"

// This file is NOT autogenerated by the ConvertHWEnums project

// clang-format off

namespace counter_dx11_gfx6
{
    using namespace counter_gfx6;

    std::vector<std::vector<GpaHardwareCounterDesc>*> kDx11CounterGroupArrayGfx6 = {
        &CB0countersGfx6,
        &CB1countersGfx6,
        &CB2countersGfx6,
        &CB3countersGfx6,
        &CB4countersGfx6,
        &CB5countersGfx6,
        &CB6countersGfx6,
        &CB7countersGfx6,
        &DB0countersGfx6,
        &DB1countersGfx6,
        &DB2countersGfx6,
        &DB3countersGfx6,
        &DB4countersGfx6,
        &DB5countersGfx6,
        &DB6countersGfx6,
        &DB7countersGfx6,
        &GRBMcountersGfx6,
        &PA_SU0countersGfx6,
        &PA_SU1countersGfx6,
        &PA_SC0countersGfx6,
        &PA_SC1countersGfx6,
        &SX0countersGfx6,
        &SX1countersGfx6,
        &SX2countersGfx6,
        &SX3countersGfx6,
        &SPI0countersGfx6,
        &SPI1countersGfx6,
        &SQ0countersGfx6,
        &SQ1countersGfx6,
        &TA0countersGfx6,
        &TA1countersGfx6,
        &TA2countersGfx6,
        &TA3countersGfx6,
        &TA4countersGfx6,
        &TA5countersGfx6,
        &TA6countersGfx6,
        &TA7countersGfx6,
        &TA8countersGfx6,
        &TA9countersGfx6,
        &TA10countersGfx6,
        &TA11countersGfx6,
        &TA12countersGfx6,
        &TA13countersGfx6,
        &TA14countersGfx6,
        &TA15countersGfx6,
        &TA16countersGfx6,
        &TA17countersGfx6,
        &TA18countersGfx6,
        &TA19countersGfx6,
        &TA20countersGfx6,
        &TA21countersGfx6,
        &TA22countersGfx6,
        &TA23countersGfx6,
        &TA24countersGfx6,
        &TA25countersGfx6,
        &TA26countersGfx6,
        &TA27countersGfx6,
        &TA28countersGfx6,
        &TA29countersGfx6,
        &TA30countersGfx6,
        &TA31countersGfx6,
        &TCP0countersGfx6,
        &TCP1countersGfx6,
        &TCP2countersGfx6,
        &TCP3countersGfx6,
        &TCP4countersGfx6,
        &TCP5countersGfx6,
        &TCP6countersGfx6,
        &TCP7countersGfx6,
        &TCP8countersGfx6,
        &TCP9countersGfx6,
        &TCP10countersGfx6,
        &TCP11countersGfx6,
        &TCP12countersGfx6,
        &TCP13countersGfx6,
        &TCP14countersGfx6,
        &TCP15countersGfx6,
        &TCP16countersGfx6,
        &TCP17countersGfx6,
        &TCP18countersGfx6,
        &TCP19countersGfx6,
        &TCP20countersGfx6,
        &TCP21countersGfx6,
        &TCP22countersGfx6,
        &TCP23countersGfx6,
        &TCP24countersGfx6,
        &TCP25countersGfx6,
        &TCP26countersGfx6,
        &TCP27countersGfx6,
        &TCP28countersGfx6,
        &TCP29countersGfx6,
        &TCP30countersGfx6,
        &TCP31countersGfx6,
        &TCC0countersGfx6,
        &TCC1countersGfx6,
        &TCC2countersGfx6,
        &TCC3countersGfx6,
        &TCC4countersGfx6,
        &TCC5countersGfx6,
        &TCC6countersGfx6,
        &TCC7countersGfx6,
        &TCC8countersGfx6,
        &TCC9countersGfx6,
        &TCC10countersGfx6,
        &TCC11countersGfx6,
        &VGT0countersGfx6,
        &VGT1countersGfx6,
        &GPUTimecountersGfx6,
    };

    std::vector<GpaCounterGroupDesc> kHwDx11GroupsGfx6 = {
        {0, "DRMDMA0", 0, 57, 2},
        {1, "DRMDMA1", 1, 57, 2},
        {2, "SRBM", 0, 18, 2},
        {3, "CP", 0, 46, 1},
        {4, "CB0", 0, 215, 4},
        {5, "CB1", 1, 215, 4},
        {6, "CB2", 2, 215, 4},
        {7, "CB3", 3, 215, 4},
        {8, "CB4", 4, 215, 4},
        {9, "CB5", 5, 215, 4},
        {10, "CB6", 6, 215, 4},
        {11, "CB7", 7, 215, 4},
        {12, "DB0", 0, 249, 4},
        {13, "DB1", 1, 249, 4},
        {14, "DB2", 2, 249, 4},
        {15, "DB3", 3, 249, 4},
        {16, "DB4", 4, 249, 4},
        {17, "DB5", 5, 249, 4},
        {18, "DB6", 6, 249, 4},
        {19, "DB7", 7, 249, 4},
        {20, "GRBM", 0, 29, 2},
        {21, "GRBMSE0", 0, 15, 1},
        {22, "GRBMSE1", 1, 15, 1},
        {23, "RLC", 0, 59, 2},
        {24, "PA_SU0", 0, 136, 4},
        {25, "PA_SU1", 1, 136, 4},
        {26, "PA_SC0", 0, 292, 8},
        {27, "PA_SC1", 1, 292, 8},
        {28, "SX0", 0, 32, 4},
        {29, "SX1", 1, 32, 4},
        {30, "SX2", 2, 32, 4},
        {31, "SX3", 3, 32, 4},
        {32, "SPI0", 0, 189, 4},
        {33, "SPI1", 1, 189, 4},
        {34, "SQ0", 0, 399, 16},
        {35, "SQ1", 1, 399, 16},
        {36, "TA0", 0, 106, 2},
        {37, "TA1", 1, 106, 2},
        {38, "TA2", 2, 106, 2},
        {39, "TA3", 3, 106, 2},
        {40, "TA4", 4, 106, 2},
        {41, "TA5", 5, 106, 2},
        {42, "TA6", 6, 106, 2},
        {43, "TA7", 7, 106, 2},
        {44, "TA8", 8, 106, 2},
        {45, "TA9", 9, 106, 2},
        {46, "TA10", 10, 106, 2},
        {47, "TA11", 11, 106, 2},
        {48, "TA12", 12, 106, 2},
        {49, "TA13", 13, 106, 2},
        {50, "TA14", 14, 106, 2},
        {51, "TA15", 15, 106, 2},
        {52, "TA16", 16, 106, 2},
        {53, "TA17", 17, 106, 2},
        {54, "TA18", 18, 106, 2},
        {55, "TA19", 19, 106, 2},
        {56, "TA20", 20, 106, 2},
        {57, "TA21", 21, 106, 2},
        {58, "TA22", 22, 106, 2},
        {59, "TA23", 23, 106, 2},
        {60, "TA24", 24, 106, 2},
        {61, "TA25", 25, 106, 2},
        {62, "TA26", 26, 106, 2},
        {63, "TA27", 27, 106, 2},
        {64, "TA28", 28, 106, 2},
        {65, "TA29", 29, 106, 2},
        {66, "TA30", 30, 106, 2},
        {67, "TA31", 31, 106, 2},
        {68, "TD0", 0, 49, 1},
        {69, "TD1", 1, 49, 1},
        {70, "TD2", 2, 49, 1},
        {71, "TD3", 3, 49, 1},
        {72, "TD4", 4, 49, 1},
        {73, "TD5", 5, 49, 1},
        {74, "TD6", 6, 49, 1},
        {75, "TD7", 7, 49, 1},
        {76, "TD8", 8, 49, 1},
        {77, "TD9", 9, 49, 1},
        {78, "TD10", 10, 49, 1},
        {79, "TD11", 11, 49, 1},
        {80, "TD12", 12, 49, 1},
        {81, "TD13", 13, 49, 1},
        {82, "TD14", 14, 49, 1},
        {83, "TD15", 15, 49, 1},
        {84, "TD16", 16, 49, 1},
        {85, "TD17", 17, 49, 1},
        {86, "TD18", 18, 49, 1},
        {87, "TD19", 19, 49, 1},
        {88, "TD20", 20, 49, 1},
        {89, "TD21", 21, 49, 1},
        {90, "TD22", 22, 49, 1},
        {91, "TD23", 23, 49, 1},
        {92, "TD24", 24, 49, 1},
        {93, "TD25", 25, 49, 1},
        {94, "TD26", 26, 49, 1},
        {95, "TD27", 27, 49, 1},
        {96, "TD28", 28, 49, 1},
        {97, "TD29", 29, 49, 1},
        {98, "TD30", 30, 49, 1},
        {99, "TD31", 31, 49, 1},
        {100, "TCP0", 0, 110, 4},
        {101, "TCP1", 1, 110, 4},
        {102, "TCP2", 2, 110, 4},
        {103, "TCP3", 3, 110, 4},
        {104, "TCP4", 4, 110, 4},
        {105, "TCP5", 5, 110, 4},
        {106, "TCP6", 6, 110, 4},
        {107, "TCP7", 7, 110, 4},
        {108, "TCP8", 8, 110, 4},
        {109, "TCP9", 9, 110, 4},
        {110, "TCP10", 10, 110, 4},
        {111, "TCP11", 11, 110, 4},
        {112, "TCP12", 12, 110, 4},
        {113, "TCP13", 13, 110, 4},
        {114, "TCP14", 14, 110, 4},
        {115, "TCP15", 15, 110, 4},
        {116, "TCP16", 16, 110, 4},
        {117, "TCP17", 17, 110, 4},
        {118, "TCP18", 18, 110, 4},
        {119, "TCP19", 19, 110, 4},
        {120, "TCP20", 20, 110, 4},
        {121, "TCP21", 21, 110, 4},
        {122, "TCP22", 22, 110, 4},
        {123, "TCP23", 23, 110, 4},
        {124, "TCP24", 24, 110, 4},
        {125, "TCP25", 25, 110, 4},
        {126, "TCP26", 26, 110, 4},
        {127, "TCP27", 27, 110, 4},
        {128, "TCP28", 28, 110, 4},
        {129, "TCP29", 29, 110, 4},
        {130, "TCP30", 30, 110, 4},
        {131, "TCP31", 31, 110, 4},
        {132, "TCC0", 0, 128, 4},
        {133, "TCC1", 1, 128, 4},
        {134, "TCC2", 2, 128, 4},
        {135, "TCC3", 3, 128, 4},
        {136, "TCC4", 4, 128, 4},
        {137, "TCC5", 5, 128, 4},
        {138, "TCC6", 6, 128, 4},
        {139, "TCC7", 7, 128, 4},
        {140, "TCC8", 8, 128, 4},
        {141, "TCC9", 9, 128, 4},
        {142, "TCC10", 10, 128, 4},
        {143, "TCC11", 11, 128, 4},
        {144, "TCA0", 0, 35, 4},
        {145, "TCA1", 1, 35, 4},
        {146, "GDS", 0, 65, 4},
        {147, "IA", 0, 22, 4},
        {148, "VGT0", 0, 140, 4},
        {149, "VGT1", 1, 140, 4},
        {150, "MC0", 0, 22, 4},
        {151, "MC1", 1, 22, 4},
        {152, "MC2", 2, 22, 4},
        {153, "MC3", 3, 22, 4},
        {154, "MC4", 4, 22, 4},
        {155, "MC5", 5, 22, 4},
        {156, "MC6", 6, 22, 4},
        {157, "MC7", 7, 22, 4},
        {158, "MC8", 8, 22, 4},
        {159, "MC9", 9, 22, 4},
        {160, "MC10", 10, 22, 4},
        {161, "MC11", 11, 22, 4},
        {162, "GPUTimeStamp", 0, 1, 1},
        {163, "GPUTime", 0, 6, 2},
    };

    GpaCounterGroupExposedCounterDesc kHwDx11ExposedCountersByGroupGfx6[] = {
        {4, 178},
        {5, 393},
        {6, 608},
        {7, 823},
        {8, 1038},
        {9, 1253},
        {10, 1468},
        {11, 1683},
        {12, 1898},
        {13, 2147},
        {14, 2396},
        {15, 2645},
        {16, 2894},
        {17, 3143},
        {18, 3392},
        {19, 3641},
        {20, 3890},
        {24, 4008},
        {25, 4144},
        {26, 4280},
        {27, 4572},
        {28, 4864},
        {29, 4896},
        {30, 4928},
        {31, 4960},
        {32, 4992},
        {33, 5181},
        {34, 5370},
        {35, 5769},
        {36, 6168},
        {37, 6274},
        {38, 6380},
        {39, 6486},
        {40, 6592},
        {41, 6698},
        {42, 6804},
        {43, 6910},
        {44, 7016},
        {45, 7122},
        {46, 7228},
        {47, 7334},
        {48, 7440},
        {49, 7546},
        {50, 7652},
        {51, 7758},
        {52, 7864},
        {53, 7970},
        {54, 8076},
        {55, 8182},
        {56, 8288},
        {57, 8394},
        {58, 8500},
        {59, 8606},
        {60, 8712},
        {61, 8818},
        {62, 8924},
        {63, 9030},
        {64, 9136},
        {65, 9242},
        {66, 9348},
        {67, 9454},
        {100, 11128},
        {101, 11238},
        {102, 11348},
        {103, 11458},
        {104, 11568},
        {105, 11678},
        {106, 11788},
        {107, 11898},
        {108, 12008},
        {109, 12118},
        {110, 12228},
        {111, 12338},
        {112, 12448},
        {113, 12558},
        {114, 12668},
        {115, 12778},
        {116, 12888},
        {117, 12998},
        {118, 13108},
        {119, 13218},
        {120, 13328},
        {121, 13438},
        {122, 13548},
        {123, 13658},
        {124, 13768},
        {125, 13878},
        {126, 13988},
        {127, 14098},
        {128, 14208},
        {129, 14318},
        {130, 14428},
        {131, 14538},
        {132, 14648},
        {133, 14776},
        {134, 14904},
        {135, 15032},
        {136, 15160},
        {137, 15288},
        {138, 15416},
        {139, 15544},
        {140, 15672},
        {141, 15800},
        {142, 15928},
        {143, 16056},
        {148, 16341},
        {149, 16481},
        {163, 16886},
    };

    GpaPaddedCounterDesc kDx11PaddedCounterByGroupGfx6[] = {
        {}
    };

    GpaSqCounterGroupDesc kHwDx11SqGroupsGfx6[] = {
        {34, 0, kSqAll},
        {35, 1, kSqAll},
    };

    unsigned int kHwDx11SqIsolatedGroupsGfx6[] = {
        36,   // Ta
        37,   // Ta
        38,   // Ta
        39,   // Ta
        40,   // Ta
        41,   // Ta
        42,   // Ta
        43,   // Ta
        44,   // Ta
        45,   // Ta
        46,   // Ta
        47,   // Ta
        48,   // Ta
        49,   // Ta
        50,   // Ta
        51,   // Ta
        52,   // Ta
        53,   // Ta
        54,   // Ta
        55,   // Ta
        56,   // Ta
        57,   // Ta
        58,   // Ta
        59,   // Ta
        60,   // Ta
        61,   // Ta
        62,   // Ta
        63,   // Ta
        64,   // Ta
        65,   // Ta
        66,   // Ta
        67,   // Ta
        68,   // Td
        69,   // Td
        70,   // Td
        71,   // Td
        72,   // Td
        73,   // Td
        74,   // Td
        75,   // Td
        76,   // Td
        77,   // Td
        78,   // Td
        79,   // Td
        80,   // Td
        81,   // Td
        82,   // Td
        83,   // Td
        84,   // Td
        85,   // Td
        86,   // Td
        87,   // Td
        88,   // Td
        89,   // Td
        90,   // Td
        91,   // Td
        92,   // Td
        93,   // Td
        94,   // Td
        95,   // Td
        96,   // Td
        97,   // Td
        98,   // Td
        99,   // Td
        100,  // Tcp
        101,  // Tcp
        102,  // Tcp
        103,  // Tcp
        104,  // Tcp
        105,  // Tcp
        106,  // Tcp
        107,  // Tcp
        108,  // Tcp
        109,  // Tcp
        110,  // Tcp
        111,  // Tcp
        112,  // Tcp
        113,  // Tcp
        114,  // Tcp
        115,  // Tcp
        116,  // Tcp
        117,  // Tcp
        118,  // Tcp
        119,  // Tcp
        120,  // Tcp
        121,  // Tcp
        122,  // Tcp
        123,  // Tcp
        124,  // Tcp
        125,  // Tcp
        126,  // Tcp
        127,  // Tcp
        128,  // Tcp
        129,  // Tcp
        130,  // Tcp
        131,  // Tcp
        132,  // Tcc
        133,  // Tcc
        134,  // Tcc
        135,  // Tcc
        136,  // Tcc
        137,  // Tcc
        138,  // Tcc
        139,  // Tcc
        140,  // Tcc
        141,  // Tcc
        142,  // Tcc
        143,  // Tcc
        144,  // Tca
        145,  // Tca
    };

    PE_BLOCK_ID kHwDx11DriverEnumGfx6[] = {
        PE_BLOCK_DRMDMA,
        PE_BLOCK_DRMDMA,
        PE_BLOCK_SRBM,
        PE_BLOCK_CP,
        PE_BLOCK_CB,
        PE_BLOCK_CB,
        PE_BLOCK_CB,
        PE_BLOCK_CB,
        PE_BLOCK_CB,
        PE_BLOCK_CB,
        PE_BLOCK_CB,
        PE_BLOCK_CB,
        PE_BLOCK_DB,
        PE_BLOCK_DB,
        PE_BLOCK_DB,
        PE_BLOCK_DB,
        PE_BLOCK_DB,
        PE_BLOCK_DB,
        PE_BLOCK_DB,
        PE_BLOCK_DB,
        PE_BLOCK_GRBM,
        PE_BLOCK_GRBMSE,
        PE_BLOCK_GRBMSE,
        PE_BLOCK_RLC,
        PE_BLOCK_PA,
        PE_BLOCK_PA,
        PE_BLOCK_SC,
        PE_BLOCK_SC,
        PE_BLOCK_SX,
        PE_BLOCK_SX,
        PE_BLOCK_SX,
        PE_BLOCK_SX,
        PE_BLOCK_SPI,
        PE_BLOCK_SPI,
        PE_BLOCK_SQ,
        PE_BLOCK_SQ,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TA,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TD,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCP,
        PE_BLOCK_TCC,
        PE_BLOCK_TCC,
        PE_BLOCK_TCC,
        PE_BLOCK_TCC,
        PE_BLOCK_TCC,
        PE_BLOCK_TCC,
        PE_BLOCK_TCC,
        PE_BLOCK_TCC,
        PE_BLOCK_TCC,
        PE_BLOCK_TCC,
        PE_BLOCK_TCC,
        PE_BLOCK_TCC,
        PE_BLOCK_TCA,
        PE_BLOCK_TCA,
        PE_BLOCK_GDS,
        PE_BLOCK_IA,
        PE_BLOCK_VGT,
        PE_BLOCK_VGT,
        PE_BLOCK_MC,
        PE_BLOCK_MC,
        PE_BLOCK_MC,
        PE_BLOCK_MC,
        PE_BLOCK_MC,
        PE_BLOCK_MC,
        PE_BLOCK_MC,
        PE_BLOCK_MC,
        PE_BLOCK_MC,
        PE_BLOCK_MC,
        PE_BLOCK_MC,
        PE_BLOCK_MC,
        PE_BLOCK_UNKNOWN,
        PE_BLOCK_UNKNOWN,
    };

    const unsigned int           kHwDx11GpuTimeBottomToBottomDurationIndexGfx6 = 16886;                                              ///< Index of delta between the previous command reaching bottom of pipe and the current command reaching bottom of pipe, will not include latency of first data to travel through pipeline, best for large data sets. for Dx11 for Gfx6 family
    const unsigned int           kHwDx11GpuTimeBottomToBottomStartIndexGfx6    = static_cast<unsigned int>(-1);                      ///< Index of time of the previous command reaching bottom of pipe for Dx11 for Gfx6 family
    const unsigned int           kHwDx11GpuTimeBottomToBottomEndIndexGfx6      = static_cast<unsigned int>(-1);                      ///< Index of time of the current command reaching bottom of pipe for Dx11 for Gfx6 family
    const unsigned int           kHwDx11GpuTimeTopToBottomDurationIndexGfx6    = 16889;                                              ///< Index of execution duration of the current command from top of pipe to bottom of pipe, may include overhead of time in queue for Dx11 for Gfx6 family
    const unsigned int           kHwDx11GpuTimeTopToBottomStartIndexGfx6       = static_cast<unsigned int>(-1);                      ///< Index of time that the current command reaches the top of pipe for Dx11 for Gfx6 family
    const unsigned int           kHwDx11GpuTimeTopToBottomEndIndexGfx6         = static_cast<unsigned int>(-1);                      ///< Index of time that the current command reaches the bottom of pipe for Dx11 for Gfx6 family
    const std::set<unsigned int> kHwDx11TimestampBlockIdsGfx6                  = {163, 162};                                         ///< Timestamp block id's for Dx11 for Gfx6 family
    const std::set<unsigned int> kHwDx11TimeCounterIndicesGfx6                 = {16886, 16887, 16888, 16889, 16890, 16891, 16885};  ///< Timestamp counter indices for Dx11 for Gfx6 family
    const unsigned int           kHwDx11GroupCountGfx6                         = static_cast<unsigned int>(kHwDx11GroupsGfx6.size());
    const unsigned int           kDx11PaddedCounterGroupCountGfx6              = 0;
    const unsigned int           kHwDx11SqGroupCountGfx6                       = sizeof(kHwDx11SqGroupsGfx6) / sizeof(GpaSqCounterGroupDesc);
    const unsigned int           kHwDx11SqIsolatedGroupCountGfx6               = sizeof(kHwDx11SqIsolatedGroupsGfx6) / sizeof(unsigned int);
}  // namespace counter_dx11_gfx6

// clang-format on

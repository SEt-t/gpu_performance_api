;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright (c) 2010-2018 Advanced Micro Devices, Inc. All rights reserved.
;;
;; Counter definitions for DX/GL for Gfx6 (GFX IP v6)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

name=GPUTime
desc=#Timing#Time this API call took to execute on the GPU in nanoseconds. Does not include time that draw calls are processed in parallel.
type=gpa_float64
usage=nanoseconds
[GLGfx6]
[DX11Gfx6]
GPUTime_Bottom_To_Bottom_Duration
eqn=GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*

name=GPUBusy
usage=percentage
desc=#Timing#The percentage of time GPU was busy.
type=gpa_float64
[GLGfx6]
[DX11Gfx6]
GRBM_PERF_SEL_GUI_ACTIVE
GRBM_PERF_SEL_COUNT
eqn=0,1,/,(100),*,(100),min

name=TessellatorBusy
usage=percentage
desc=#Timing#The percentage of time the tessellation engine is busy.
type=gpa_float64
[GLGfx6]
VGT_PERF_VGT_TE11_BUSY
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,NUM_PRIM_PIPES,/,1,/,(100),*
[DX11Gfx6]
VGT0_PERF_VGT_TE11_BUSY
VGT1_PERF_VGT_TE11_BUSY
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,1,max,2,/,(100),*

;; there are some quirks to the list of internal counters for these shader busy counters:
;; the PS_CTL_BUSY has been inserted into some of the earlier public counters because it
;; was being put into a second pass and causing results that were way higher (500%) than expected.
;; Since the PS is expected to be used often, I want that counter to report proper values 
;; often. Doing this may cause some of the GS, HS, or CS counters to be split into a second pass
;; but I don't consider them to be quite as important.

name=VSBusy
desc=#Timing#The percentage of time the ShaderUnit has vertex shader work to do.
type=gpa_float64
usage=percentage
[GLGfx6]
SPI_PERF_VS_BUSY
SPI_PERF_ES_BUSY
SPI_PERF_LS_BUSY
SPI_PERF_PS_CTL_BUSY
SPI_PERF_VS_WAVE
SPI_PERF_ES_WAVE
SPI_PERF_LS_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,4,ifnotzero,1,5,ifnotzero,2,6,ifnotzero,7,/,(100),*,(100),min
[DX11Gfx6]
SPI*_PERF_VS_BUSY[0,1]
SPI*_PERF_ES_BUSY[0,1]
SPI*_PERF_LS_BUSY[0,1]
SPI*_PERF_PS_CTL_BUSY[0,1]
SPI*_PERF_VS_WAVE[0,1]
SPI*_PERF_ES_WAVE[0,1]
SPI*_PERF_LS_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,8,ifnotzero,2,10,ifnotzero,4,12,ifnotzero,(0),1,9,ifnotzero,3,11,ifnotzero,5,13,ifnotzero,max,14,/,(100),*,(100),min

name=VSTime
desc=#Timing#Time vertex shaders are busy in nanoseconds.
type=gpa_float64
usage=nanoseconds
[GLGfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI_PERF_VS_BUSY
SPI_PERF_ES_BUSY
SPI_PERF_LS_BUSY
SPI_PERF_PS_CTL_BUSY
SPI_PERF_VS_WAVE
SPI_PERF_ES_WAVE
SPI_PERF_LS_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,5,ifnotzero,2,6,ifnotzero,3,7,ifnotzero,8,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
[DX11Gfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI*_PERF_VS_BUSY[0,1]
SPI*_PERF_ES_BUSY[0,1]
SPI*_PERF_LS_BUSY[0,1]
SPI*_PERF_PS_CTL_BUSY[0,1]
SPI*_PERF_VS_WAVE[0,1]
SPI*_PERF_ES_WAVE[0,1]
SPI*_PERF_LS_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,9,ifnotzero,3,11,ifnotzero,5,13,ifnotzero,(0),2,10,ifnotzero,4,12,ifnotzero,6,14,ifnotzero,max,15,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*

name=HSBusy
desc=#Timing#The percentage of time the ShaderUnit has hull shader work to do.
type=gpa_float64
usage=percentage
[GLGfx6]
SPI_PERF_HS_BUSY
SPI_PERF_HS_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,1,ifnotzero,2,/,(100),*,(100),min
[DX11Gfx6]
SPI*_PERF_HS_BUSY[0,1]
SPI*_PERF_HS_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,2,ifnotzero,(0),1,3,ifnotzero,max,4,/,(100),*,(100),min


name=HSTime
desc=#Timing#Time hull shaders are busy in nanoseconds.
type=gpa_float64
usage=nanoseconds
[GLGfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI_PERF_HS_BUSY
SPI_PERF_HS_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,2,ifnotzero,3,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
[DX11Gfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI*_PERF_HS_BUSY[0,1]
SPI*_PERF_HS_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,3,ifnotzero,(0),2,4,ifnotzero,max,5,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*

name=DSBusy
desc=#Timing#The percentage of time the ShaderUnit has domain shader work to do.
type=gpa_float64
usage=percentage
[GLGfx6]
SPI_PERF_VS_BUSY
SPI_PERF_ES_BUSY
SPI_PERF_PS_CTL_BUSY
SPI_PERF_ES_WAVE
SPI_PERF_LS_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,1,3,ifnotzero,4,ifnotzero,5,/,(100),*,(100),min
[DX11Gfx6]
SPI*_PERF_VS_BUSY[0,1]
SPI*_PERF_ES_BUSY[0,1]
SPI*_PERF_PS_CTL_BUSY[0,1]
SPI*_PERF_ES_WAVE[0,1]
SPI*_PERF_LS_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,2,6,ifnotzero,8,ifnotzero,(0),1,3,7,ifnotzero,9,ifnotzero,max,10,/,(100),*,(100),min


name=DSTime
desc=#Timing#Time domain shaders are busy in nanoseconds.
type=gpa_float64
usage=nanoseconds
[GLGfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI_PERF_VS_BUSY
SPI_PERF_ES_BUSY
SPI_PERF_PS_CTL_BUSY
SPI_PERF_ES_WAVE
SPI_PERF_LS_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,2,4,ifnotzero,5,ifnotzero,6,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
[DX11Gfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI*_PERF_VS_BUSY[0,1]
SPI*_PERF_ES_BUSY[0,1]
SPI*_PERF_PS_CTL_BUSY[0,1]
SPI*_PERF_ES_WAVE[0,1]
SPI*_PERF_LS_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,3,7,ifnotzero,9,ifnotzero,(0),2,4,8,ifnotzero,10,ifnotzero,max,11,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*


name=GSBusy
desc=#Timing#The percentage of time the ShaderUnit has geometry shader work to do.
type=gpa_float64
usage=percentage
[GLGfx6]
SPI_PERF_GS_BUSY
SPI_PERF_GS_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,1,ifnotzero,2,/,(100),*,(100),min
[DX11Gfx6]
SPI*_PERF_GS_BUSY[0,1]
SPI*_PERF_GS_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,2,ifnotzero,(0),1,3,ifnotzero,max,4,/,(100),*,(100),min


name=GSTime
desc=#Timing#Time geometry shaders are busy in nanoseconds.
type=gpa_float64
usage=nanoseconds
[GLGfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI_PERF_GS_BUSY
SPI_PERF_GS_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,2,ifnotzero,3,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
[DX11Gfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI*_PERF_GS_BUSY[0,1]
SPI*_PERF_GS_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,3,ifnotzero,(0),2,4,ifnotzero,max,5,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*

name=PSBusy
desc=#Timing#The percentage of time the ShaderUnit has pixel shader work to do.
type=gpa_float64
usage=percentage
[GLGfx6]
SPI_PERF_PS_CTL_BUSY
SPI_PERF_PS_CTL_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,1,ifnotzero,2,/,(100),*,(100),min
[DX11Gfx6]
SPI*_PERF_PS_CTL_BUSY[0,1]
SPI*_PERF_PS_CTL_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,2,ifnotzero,(0),1,3,ifnotzero,max,4,/,(100),*


name=PSTime
desc=#Timing#Time pixel shaders are busy in nanoseconds.
type=gpa_float64
usage=nanoseconds
[GLGfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI_PERF_PS_CTL_BUSY
SPI_PERF_PS_CTL_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,2,ifnotzero,3,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
[DX11Gfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI*_PERF_PS_CTL_BUSY[0,1]
SPI*_PERF_PS_CTL_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,3,ifnotzero,(0),2,4,ifnotzero,max,5,/,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*


name=CSBusy
desc=#Timing#The percentage of time the ShaderUnit has compute shader work to do.
type=gpa_float64
usage=percentage
[GLGfx6]
SPI_PERF_CS_R0_BUSY
SPI_PERF_CS_R0_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,1,ifnotzero,2,/,(100),*,(100),min
[DX11Gfx6]
SPI*_PERF_CS_R0_BUSY[0,1]
SPI*_PERF_CS_R0_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),0,2,ifnotzero,(0),1,3,ifnotzero,max,4,/,(100),*,(100),min

name=CSTime
desc=#Timing#Time compute shaders are busy in nanoseconds.
type=gpa_float64
usage=nanoseconds
[GLGfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI_PERF_CS_R0_BUSY
SPI_PERF_CS_R0_WAVE
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,2,ifnotzero,3,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*
[DX11Gfx6]
GPUTime_Bottom_To_Bottom_Duration
SPI*_PERF_CS_R0_BUSY[0,1]
SPI*_PERF_CS_R0_WAVE[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=(0),1,3,ifnotzero,(0),2,4,ifnotzero,max,5,/,(1),min,GPUTime_Bottom_To_Bottom_Duration,TS_FREQ,/,(1000000000),*,*

name=VSVerticesIn
desc=#VertexShader#The number of vertices processed by the VS.
type=gpa_float64
usage=items
[GLGfx6]
VGT_PERF_VGT_SPI_VSVERT_SEND
VGT_PERF_VGT_SPI_ESVERT_VALID
VGT_PERF_VGT_SPI_LSVERT_VALID
eqn=0,1,1,ifnotzero,2,2,ifnotzero
[DX11Gfx6]
VGT*_PERF_VGT_SPI_VSVERT_SEND[0,1]
VGT*_PERF_VGT_SPI_ESVERT_VALID[0,1]
VGT*_PERF_VGT_SPI_LSVERT_VALID[0,1]
eqn=0,1,+,2,3,+,2,3,+,ifnotzero,4,5,+,4,5,+,ifnotzero

name=HSPatches
desc=#HullShader#The number of patches processed by the HS.
type=gpa_float64
usage=items
[GLGfx6]
VGT_PERF_VGT_SPI_HSVERT_VALID
eqn=0
[DX11Gfx6]
VGT*_PERF_VGT_SPI_HSVERT_VALID[0,1]
eqn=0,1,+

name=DSVerticesIn
desc=#DomainShader#The number of vertices processed by the DS.
type=gpa_float64
usage=items
[GLGfx6]
VGT_PERF_VGT_SPI_VSVERT_SEND
VGT_PERF_VGT_SPI_ESVERT_VALID
VGT_PERF_VGT_SPI_LSVERT_VALID
eqn=(0),0,1,1,ifnotzero,2,ifnotzero
[DX11Gfx6]
VGT*_PERF_VGT_SPI_VSVERT_SEND[0,1]
VGT*_PERF_VGT_SPI_ESVERT_VALID[0,1]
VGT*_PERF_VGT_SPI_LSVERT_VALID[0,1]
eqn=(0),0,1,+,2,3,+,2,3,+,ifnotzero,4,5,+,ifnotzero

name=GSPrimsIn
desc=#GeometryShader#The number of primitives passed into the GS.
type=gpa_float64
usage=items
[GLGfx6]
VGT_PERF_VGT_SPI_GSPRIM_VALID
eqn=0
[DX11Gfx6]
VGT*_PERF_VGT_SPI_GSPRIM_VALID[0,1]
eqn=0,1,+

name=GSVerticesOut
desc=#GeometryShader#The number of vertices output by the GS.
type=gpa_float64
usage=items
[GLGfx6]
VGT_PERF_VGT_SPI_VSVERT_SEND
VGT_PERF_VGT_SPI_ESVERT_VALID
eqn=(0),0,1,ifnotzero
[DX11Gfx6]
VGT*_PERF_VGT_SPI_VSVERT_SEND[0,1]
VGT*_PERF_VGT_SPI_ESVERT_VALID[0,1]
eqn=(0),0,1,+,2,3,+,ifnotzero

name=PrimitiveAssemblyBusy
desc=#Timing#The percentage of GPUTime that primitive assembly (clipping and culling) is busy. High values may be caused by having many small primitives; mid to low values may indicate pixel shader or output buffer bottleneck.
type=gpa_float64
usage=percentage
[GLGfx6]
PA_SU_PERF_PAPC_CLIP_BUSY
PA_SU_PERF_PAPC_SU_STALLED_SC
PA_SU_PERF_PAPC_SU_OUTPUT_PRIM
PA_SU_PERF_PAPC_SU_OUTPUT_PRIM_DUAL
PA_SU_PERF_PAPC_SU_OUTPUT_CLIP_PRIM
PA_SU_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,1,-,2,3,+,4,+,5,(2),*,+,SU_CLOCKS_PRIM,*,-,NUM_PRIM_PIPES,/,(0),max,6,/,(100),*,(100),min
[DX11Gfx6]
PA_SU*_PERF_PAPC_CLIP_BUSY[0,1]
PA_SU*_PERF_PAPC_SU_STALLED_SC[0,1]
PA_SU*_PERF_PAPC_SU_OUTPUT_PRIM[0,1]
PA_SU*_PERF_PAPC_SU_OUTPUT_PRIM_DUAL[0,1]
PA_SU*_PERF_PAPC_SU_OUTPUT_CLIP_PRIM[0,1]
PA_SU*_PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,2,-,4,6,+,8,+,10,(2),*,+,SU_CLOCKS_PRIM,*,-,1,3,-,5,7,+,9,+,11,(2),*,+,SU_CLOCKS_PRIM,*,-,max,(0),max,12,/,(100),*,(100),min

name=PrimitivesIn
desc=#PrimitiveAssembly#The number of primitives received by the hardware. This includes primitives generated by tessellation.
type=gpa_float64
usage=items
[GLGfx6]
PA_SU_PERF_PAPC_PA_INPUT_PRIM
eqn=0
[DX11Gfx6]
PA_SU*_PERF_PAPC_PA_INPUT_PRIM[0,1]
eqn=0,1,+

name=CulledPrims
desc=#PrimitiveAssembly#The number of culled primitives. Typical reasons include scissor, the primitive having zero area, and back or front face culling.
type=gpa_float64
usage=items
[GLGfx6]
PA_SU_PERF_PAPC_CLPR_CULL_PRIM
PA_SU_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM
PA_SU_PERF_PAPC_SU_BACK_FACE_CULL_PRIM
PA_SU_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM
PA_SU_PERF_PAPC_SU_POLYMODE_FACE_CULL
eqn=0,1,+,2,+,3,+,4,+
[DX11Gfx6]
PA_SU*_PERF_PAPC_CLPR_CULL_PRIM[0,1]
PA_SU*_PERF_PAPC_SU_ZERO_AREA_CULL_PRIM[0,1]
PA_SU*_PERF_PAPC_SU_BACK_FACE_CULL_PRIM[0,1]
PA_SU*_PERF_PAPC_SU_FRONT_FACE_CULL_PRIM[0,1]
PA_SU*_PERF_PAPC_SU_POLYMODE_FACE_CULL[0,1]
eqn=0,1,+,2,+,3,+,4,+,5,+,6,+,7,+,8,+,9,+

name=ClippedPrims
desc=#PrimitiveAssembly#The number of primitives that required one or more clipping operations due to intersecting the view volume or user clip planes.
type=gpa_float64
usage=items
[GLGfx6]
PA_SU_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM
eqn=0
[DX11Gfx6]
PA_SU*_PERF_PAPC_CLPR_VVUCP_CLIP_PRIM[0,1]
eqn=0,1,+

name=PAStalledOnRasterizer
desc=#PrimitiveAssembly#Percentage of GPUTime that primitive assembly waits for rasterization to be ready to accept data. This roughly indicates for what percentage of time the pipeline is bottlenecked by pixel operations.
type=gpa_float64
usage=percentage
[GLGfx6]
PA_SU_PERF_PAPC_SU_STALLED_SC
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,NUM_PRIM_PIPES,/,1,/,(100),*
[DX11Gfx6]
PA_SU*_PERF_PAPC_SU_STALLED_SC[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,1,max,2,/,(100),*

name=PSPixelsOut
desc=#PixelShader#Pixels exported from shader to color buffers. Does not include killed or alpha tested pixels; if there are multiple render targets, each render target receives one export, so this will be 2 for 1 pixel written to two RTs.
type=gpa_float64
usage=items
[GLGfx6]
SX_PERF_SEL_DB0_PIXELS
SX_PERF_SEL_DB1_PIXELS
SX_PERF_SEL_DB2_PIXELS
SX_PERF_SEL_DB3_PIXELS
eqn=0,1,2,3,sum4
[DX11Gfx6]
SX*_PERF_SEL_DB0_PIXELS[0..3]
SX*_PERF_SEL_DB1_PIXELS[0..3]
SX*_PERF_SEL_DB2_PIXELS[0..3]
SX*_PERF_SEL_DB3_PIXELS[0..3]
eqn=0,1,2,3,sum4,4,5,6,7,sum4,8,9,10,11,sum4,12,13,14,15,sum4,sum4

name=PSExportStalls
desc=#PixelShader#Pixel shader output stalls. Percentage of GPUBusy. Should be zero for PS or further upstream limited cases; if not zero, indicates a bottleneck in late Z testing or in the color buffer.
type=gpa_float64
usage=percentage
[GLGfx6]
SX_PERF_SEL_DB0_PIXEL_STALL
SX_PERF_SEL_DB1_PIXEL_STALL
SX_PERF_SEL_DB2_PIXEL_STALL
SX_PERF_SEL_DB3_PIXEL_STALL
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,1,max,2,max,3,max,4,/,NUM_SHADER_ENGINES,/,(100),*
[DX11Gfx6]
SX*_PERF_SEL_DB0_PIXEL_STALL[0..3]
SX*_PERF_SEL_DB1_PIXEL_STALL[0..3]
SX*_PERF_SEL_DB2_PIXEL_STALL[0..3]
SX*_PERF_SEL_DB3_PIXEL_STALL[0..3]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,max,9,max,10,max,11,max,12,max,13,max,14,max,15,max,16,/,(100),*

name=CSThreadGroups
desc=#ComputeShader#Total number of thread groups.
type=gpa_float64
usage=items
[GLGfx6]
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=0
[DX11Gfx6]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=0,1,+

name=CSWavefronts
desc=#ComputeShader#The total number of wavefronts used for the CS.
type=gpa_float64
usage=items
[GLGfx6]
SPI_PERF_CS_R0_WAVE
eqn=0
[DX11Gfx6]
SPI*_PERF_CS_R0_WAVE[0,1]
eqn=0,1,+

name=CSThreads
desc=#ComputeShader#The number of CS threads processed by the hardware.
type=gpa_float64
usage=items
[GLGfx6]
SPI_PERF_CS_R0_NUM_THREADGROUPS
SQ_PERF_SEL_ITEMS
eqn=(0),1,0,ifnotzero
[DX11Gfx6]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
SQ*_PERF_SEL_ITEMS[0,1]
eqn=(0),2,3,+,0,1,+,ifnotzero

name=CSVALUInsts
desc=#ComputeShader#The average number of vector ALU instructions executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx6]
SQ_PERF_SEL_INSTS_VALU
SQ_PERF_SEL_WAVES
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,/,2,ifnotzero
[DX11Gfx6]
SQ*_PERF_SEL_INSTS_VALU[0,1]
SQ*_PERF_SEL_WAVES[0,1]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,2,3,+,/,4,5,+,ifnotzero

name=CSVALUUtilization
desc=#ComputeShader#The percentage of active vector ALU threads in a wave. A lower number can mean either more thread divergence in a wave or that the work-group size is not a multiple of 64. Value range: 0% (bad), 100% (ideal - no thread divergence).
type=gpa_float64
usage=percentage
[GLGfx6]
SQ_PERF_SEL_THREAD_CYCLES_VALU
SQ_PERF_SEL_INST_CYCLES_VALU
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,(64),*,/,(100),*,2,ifnotzero,(100),min
[DX11Gfx6]
SQ*_PERF_SEL_THREAD_CYCLES_VALU[0,1]
SQ*_PERF_SEL_INST_CYCLES_VALU[0,1]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,2,3,+,(64),*,/,(100),*,4,5,+,ifnotzero,(100),min

name=CSSALUInsts
desc=#ComputeShader#The average number of scalar ALU instructions executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx6]
SQ_PERF_SEL_INSTS_SALU
SQ_PERF_SEL_WAVES
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,/,2,ifnotzero
[DX11Gfx6]
SQ*_PERF_SEL_INSTS_SALU[0,1]
SQ*_PERF_SEL_WAVES[0,1]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,2,3,+,/,4,5,+,ifnotzero

name=CSVFetchInsts
desc=#ComputeShader#The average number of vector fetch instructions from the video memory executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx6]
SQ_PERF_SEL_INSTS_VMEM_RD
SQ_PERF_SEL_WAVES
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,/,2,ifnotzero
[DX11Gfx6]
SQ*_PERF_SEL_INSTS_VMEM_RD[0,1]
SQ*_PERF_SEL_WAVES[0,1]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,2,3,+,/,4,5,+,ifnotzero

name=CSSFetchInsts
desc=#ComputeShader#The average number of scalar fetch instructions from the video memory executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx6]
SQ_PERF_SEL_INSTS_SMEM
SQ_PERF_SEL_WAVES
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,/,2,ifnotzero
[DX11Gfx6]
SQ*_PERF_SEL_INSTS_SMEM[0,1]
SQ*_PERF_SEL_WAVES[0,1]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,2,3,+,/,4,5,+,ifnotzero

name=CSVWriteInsts
desc=#ComputeShader#The average number of vector write instructions to the video memory executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx6]
SQ_PERF_SEL_INSTS_VMEM_WR
SQ_PERF_SEL_WAVES
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,/,2,ifnotzero
[DX11Gfx6]
SQ*_PERF_SEL_INSTS_VMEM_WR[0,1]
SQ*_PERF_SEL_WAVES[0,1]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,2,3,+,/,4,5,+,ifnotzero

name=CSVALUBusy
desc=#ComputeShader#The percentage of GPUTime vector ALU instructions are processed. Value range: 0% (bad) to 100% (optimal).
type=gpa_float64
usage=percentage
[GLGfx6]
SQ_PERF_SEL_INST_CYCLES_VALU
GRBM_PERF_SEL_GUI_ACTIVE
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,(4),*,NUM_SIMDS,/,1,/,(100),*,2,ifnotzero
[DX11Gfx6]
SQ*_PERF_SEL_INST_CYCLES_VALU[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,(4),*,NUM_SIMDS,/,2,/,(100),*,3,4,+,ifnotzero

name=CSSALUBusy
desc=#ComputeShader#The percentage of GPUTime scalar ALU instructions are processed. Value range: 0% (bad) to 100% (optimal).
type=gpa_float64
usage=percentage
[GLGfx6]
SQ_PERF_SEL_INST_CYCLES_SALU
GRBM_PERF_SEL_GUI_ACTIVE
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,(4),*,NUM_SIMDS,NUM_SHADER_ENGINES,/,/,1,/,(100),*,2,ifnotzero
[DX11Gfx6]
SQ*_PERF_SEL_INST_CYCLES_SALU[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,(4),*,NUM_SIMDS,NUM_SHADER_ENGINES,/,/,2,/,(100),*,3,4,+,ifnotzero

name=CSMemUnitBusy
desc=#ComputeShader#The percentage of GPUTime the memory unit is active. The result includes the stall time (MemUnitStalled). This is measured with all extra fetches and writes and any cache or memory effects taken into account. Value range: 0% to 100% (fetch-bound).
type=gpa_float64
usage=percentage
[GLGfx6]
TA*_PERF_SEL_TA_BUSY[0..7]
GRBM_PERF_SEL_GUI_ACTIVE
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,/,NUM_SHADER_ENGINES,/,(100),*,9,ifnotzero
[DX11Gfx6]
TA*_PERF_SEL_TA_BUSY[0..31]
GRBM_PERF_SEL_GUI_ACTIVE
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0..31,max32,32,/,(100),*,33,34,+,ifnotzero

name=CSMemUnitStalled
desc=#ComputeShader#The percentage of GPUTime the memory unit is stalled. Try reducing the number or size of fetches and writes if possible. Value range: 0% (optimal) to 100% (bad).
type=gpa_float64
usage=percentage
[GLGfx6]
TCP*_PERF_SEL_TCP_TA_DATA_STALL_CYCLES[0..7]
GRBM_PERF_SEL_GUI_ACTIVE
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,/,NUM_SHADER_ENGINES,/,(100),*,9,ifnotzero
[DX11Gfx6]
TCP*_PERF_SEL_TCP_TA_DATA_STALL_CYCLES[0..31]
GRBM_PERF_SEL_GUI_ACTIVE
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0..31,max32,32,/,(100),*,33,34,+,ifnotzero

name=CSFetchSize
desc=#ComputeShader#The total kilobytes fetched from the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.
type=gpa_float64
usage=kilobytes
[GLGfx6]
TCC*_PERF_SEL_MC_RDREQ[0..11]
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0..11,sum12,(32),*,(1024),/,12,ifnotzero
[DX11Gfx6]
TCC*_PERF_SEL_MC_RDREQ[0..11]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0..11,sum12,(32),*,(1024),/,12,13,+,ifnotzero

name=CSWriteSize
desc=#ComputeShader#The total kilobytes written to the video memory. This is measured with all extra fetches and any cache or memory effects taken into account.
type=gpa_float64
usage=kilobytes
[GLGfx6]
TCC*_PERF_SEL_MC_WRREQ[0..11]
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0..11,sum12,(32),*,(1024),/,12,ifnotzero
[DX11Gfx6]
TCC*_PERF_SEL_MC_WRREQ[0..11]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0..11,sum12,(32),*,(1024),/,12,13,+,ifnotzero

name=CSCacheHit
desc=#ComputeShader#The percentage of fetch, write, atomic, and other instructions that hit the data cache. Value range: 0% (no hit) to 100% (optimal).
type=gpa_float64
usage=percentage
[GLGfx6]
TCC*_PERF_SEL_HIT[0..11]
TCC*_PERF_SEL_MISS[0..11]
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0..11,sum12,0..11,sum12,12..23,sum12,+,/,(100),*,24,ifnotzero
[DX11Gfx6]
TCC*_PERF_SEL_HIT[0..11]
TCC*_PERF_SEL_MISS[0..11]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0..11,sum12,0..11,sum12,12..23,sum12,+,/,(100),*,24,25,+,ifnotzero

name=CSWriteUnitStalled
desc=#ComputeShader#The percentage of GPUTime the Write unit is stalled. Value range: 0% to 100% (bad).
type=gpa_float64
usage=percentage
[GLGfx6]
TCC*_PERF_SEL_MC_WRREQ_STALL[0..11]
GRBM_PERF_SEL_GUI_ACTIVE
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,max,9,max,10,max,11,max,12,/,(100),*,13,ifnotzero
[DX11Gfx6]
TCC*_PERF_SEL_MC_WRREQ_STALL[0..11]
GRBM_PERF_SEL_GUI_ACTIVE
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,max,9,max,10,max,11,max,12,/,(100),*,13,14,+,ifnotzero

name=CSGDSInsts
desc=#ComputeShader#The average number of GDS read or GDS write instructions executed per work item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx6]
SQ_PERF_SEL_INSTS_GDS
SQ_PERF_SEL_WAVES
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,/,2,ifnotzero
[DX11Gfx6]
SQ*_PERF_SEL_INSTS_GDS[0,1]
SQ*_PERF_SEL_WAVES[0,1]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,2,3,+,/,4,5,+,ifnotzero

name=CSLDSInsts
desc=#ComputeShader#The average number of LDS read/write instructions executed per work-item (affected by flow control).
type=gpa_float64
usage=items
[GLGfx6]
SQ_PERF_SEL_INSTS_LDS
SQ_PERF_SEL_WAVES
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,/,2,ifnotzero
[DX11Gfx6]
SQ*_PERF_SEL_INSTS_LDS[0,1]
SQ*_PERF_SEL_WAVES[0,1]
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,2,3,+,/,4,5,+,ifnotzero

name=CSALUStalledByLDS
desc=#ComputeShader#The percentage of GPUTime ALU units are stalled by the LDS input queue being full or the output queue being not ready. If there are LDS bank conflicts, reduce them. Otherwise, try reducing the number of LDS accesses if possible. Value range: 0% (optimal) to 100% (bad).
type=gpa_float64
usage=percentage
[GLGfx6]
SQ_PERF_SEL_WAIT_INST_LDS
SQ_PERF_SEL_WAVES
GRBM_PERF_SEL_GUI_ACTIVE
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,/,2,/,NUM_SHADER_ENGINES,/,(100),*,3,ifnotzero
[DX11Gfx6]
SQ*_PERF_SEL_WAIT_INST_LDS[0,1]
SQ*_PERF_SEL_WAVES[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,2,3,+,/,4,/,NUM_SHADER_ENGINES,/,(100),*,5,6,+,ifnotzero

name=CSLDSBankConflict
desc=#ComputeShader#The percentage of GPUTime LDS is stalled by bank conflicts. Value range: 0% (optimal) to 100% (bad).
type=gpa_float64
usage=percentage
[GLGfx6]
SQ_PERF_SEL_LDS_BANK_CONFLICT
GRBM_PERF_SEL_GUI_ACTIVE
SPI_PERF_CS_R0_NUM_THREADGROUPS
eqn=(0),0,1,/,NUM_SIMDS,/,(100),*,2,ifnotzero
[DX11Gfx6]
SQ*_PERF_SEL_LDS_BANK_CONFLICT[0,1]
GRBM_PERF_SEL_GUI_ACTIVE
SPI*_PERF_CS_R0_NUM_THREADGROUPS[0,1]
eqn=(0),0,1,+,2,/,NUM_SIMDS,/,(100),*,3,4,+,ifnotzero

name=TexUnitBusy
desc=#Timing#The percentage of GPUTime the texture unit is active. This is measured with all extra fetches and any cache or memory effects taken into account.
type=gpa_float64
usage=percentage
[GLGfx6]
TA*_PERF_SEL_TA_BUSY[0..7]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,/,NUM_SHADER_ENGINES,/,(100),*
[DX11Gfx6]
TA*_PERF_SEL_TA_BUSY[0..31]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,max,9,max,10,max,11,max,12,max,13,max,14,max,15,max,16,max,17,max,18,max,19,max,20,max,21,max,22,max,23,max,24,max,25,max,26,max,27,max,28,max,29,max,30,max,31,max,32,/,(100),*

name=TexTriFilteringPct
desc=#TextureUnit#Percentage of pixels that received trilinear filtering. Note that not all pixels for which trilinear filtering is enabled will receive it (e.g. if the texture is magnified).
type=gpa_float64
usage=percentage
[GLGfx6]
TA*_PERF_SEL_MIP_2_CYCLE_PIXELS[0..7]
TA*_PERF_SEL_MIP_1_CYCLE_PIXELS[0..7]
eqn=0,1,2,3,4,5,6,7,sum8,8,9,10,11,12,13,14,15,sum8,0,1,2,3,4,5,6,7,sum8,+,/,(100),*
[DX11Gfx6]
TA*_PERF_SEL_MIP_2_CYCLE_PIXELS[0..31]
TA*_PERF_SEL_MIP_1_CYCLE_PIXELS[0..31]
eqn=0..31,sum32,32..63,sum32,0..31,sum32,+,/,(100),*

name=TexVolFilteringPct
desc=#TextureUnit#Percentage of pixels that received volume filtering.
type=gpa_float64
usage=percentage
[GLGfx6]
TA*_PERF_SEL_VOL_2_CYCLE_PIXELS[0..7]
TA*_PERF_SEL_VOL_1_CYCLE_PIXELS[0..7]
eqn=0,1,2,3,4,5,6,7,sum8,8,9,10,11,12,13,14,15,sum8,0,1,2,3,4,5,6,7,sum8,+,/,(100),*
[DX11Gfx6]
TA*_PERF_SEL_VOL_2_CYCLE_PIXELS[0..31]
TA*_PERF_SEL_VOL_1_CYCLE_PIXELS[0..31]
eqn=0..31,sum32,32..63,sum32,0..31,sum32,+,/,(100),*

name=TexAveAnisotropy
desc=#TextureUnit#The average degree of anisotropy applied. A number between 1 and 16. The anisotropic filtering algorithm only applies samples where they are required (e.g. there will be no extra anisotropic samples if the view vector is perpendicular to the surface) so this can be much lower than the requested anisotropy.
type=gpa_float64
usage=Items
[GLGfx6]
TA*_PERF_SEL_ANISO_1_CYCLE_QUADS[0..7]
TA*_PERF_SEL_ANISO_2_CYCLE_QUADS[0..7]
TA*_PERF_SEL_ANISO_4_CYCLE_QUADS[0..7]
TA*_PERF_SEL_ANISO_6_CYCLE_QUADS[0..7]
TA*_PERF_SEL_ANISO_8_CYCLE_QUADS[0..7]
TA*_PERF_SEL_ANISO_10_CYCLE_QUADS[0..7]
TA*_PERF_SEL_ANISO_12_CYCLE_QUADS[0..7]
TA*_PERF_SEL_ANISO_14_CYCLE_QUADS[0..7]
TA*_PERF_SEL_ANISO_16_CYCLE_QUADS[0..7]
eqn=0,1,2,3,4,5,6,7,sum8,(2),8,9,10,11,12,13,14,15,sum8,*,+,(4),16,17,18,19,20,21,22,23,sum8,*,+,(6),24,25,26,27,28,29,30,31,sum8,*,+,(8),32,33,34,35,36,37,38,39,sum8,*,+,(10),40,41,42,43,44,45,46,47,sum8,*,+,(12),48,49,50,51,52,53,54,55,sum8,*,+,(14),56,57,58,59,60,61,62,63,sum8,*,+,(16),64,65,66,67,68,69,70,71,sum8,*,+,0,1,2,3,4,5,6,7,sum8,8,9,10,11,12,13,14,15,sum8,+,16,17,18,19,20,21,22,23,sum8,+,24,25,26,27,28,29,30,31,sum8,+,32,33,34,35,36,37,38,39,sum8,+,40,41,42,43,44,45,46,47,sum8,+,48,49,50,51,52,53,54,55,sum8,+,56,57,58,59,60,61,62,63,sum8,+,64,65,66,67,68,69,70,71,sum8,+,/
[DX11Gfx6]
TA*_PERF_SEL_ANISO_1_CYCLE_QUADS[0..31]
TA*_PERF_SEL_ANISO_2_CYCLE_QUADS[0..31]
TA*_PERF_SEL_ANISO_4_CYCLE_QUADS[0..31]
TA*_PERF_SEL_ANISO_6_CYCLE_QUADS[0..31]
TA*_PERF_SEL_ANISO_8_CYCLE_QUADS[0..31]
TA*_PERF_SEL_ANISO_10_CYCLE_QUADS[0..31]
TA*_PERF_SEL_ANISO_12_CYCLE_QUADS[0..31]
TA*_PERF_SEL_ANISO_14_CYCLE_QUADS[0..31]
TA*_PERF_SEL_ANISO_16_CYCLE_QUADS[0..31]
eqn=0..31,sum32,(2),32..63,sum32,*,+,(4),64..95,sum32,*,+,(6),96..127,sum32,*,+,(8),128..159,sum32,*,+,(10),160..191,sum32,*,+,(12),192..223,sum32,*,+,(14),224..255,sum32,*,+,(16),256..287,sum32,*,+,0..31,sum32,32..63,sum32,+,64..95,sum32,+,96..127,sum32,+,128..159,sum32,+,160..191,sum32,+,192..223,sum32,+,224..255,sum32,+,256..287,sum32,+,/

name=DepthStencilTestBusy
desc=#Timing#Percentage of time GPU spent performing depth and stencil tests relative to GPUBusy.
type=gpa_float64
usage=percentage
[GLGfx6]
DB0_PERF_SEL_OP_PIPE_BUSY
DB1_PERF_SEL_OP_PIPE_BUSY
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,1,max,2,/,NUM_SHADER_ENGINES,/,(100),*
[DX11Gfx6]
DB*_PERF_SEL_OP_PIPE_BUSY[0..7]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,/,(100),*

name=HiZTilesAccepted
desc=#DepthAndStencil#Percentage of tiles accepted by HiZ and will be rendered to the depth or color buffers.
type=gpa_float64
usage=percentage
[GLGfx6]
DB0_PERF_SEL_DB_SC_TILE_CULLED
DB1_PERF_SEL_DB_SC_TILE_CULLED
DB0_PERF_SEL_SC_DB_TILE_TILES
DB1_PERF_SEL_SC_DB_TILE_TILES
eqn=0,1,+,2,3,+,/,(100),*
[DX11Gfx6]
DB*_PERF_SEL_DB_SC_TILE_CULLED[0..7]
DB*_PERF_SEL_SC_DB_TILE_TILES[0..7]
eqn=0..7,sum8,8..15,sum8,/,(100),*

name=PreZTilesDetailCulled
desc=#DepthAndStencil#Percentage of tiles rejected because the associated prim had no contributing area.
type=gpa_float64
usage=percentage
[GLGfx6]
DB0_PERF_SEL_SC_DB_TILE_TILES
DB1_PERF_SEL_SC_DB_TILE_TILES
DB0_PERF_SEL_SC_DB_QUAD_KILLED_TILES
DB1_PERF_SEL_SC_DB_QUAD_KILLED_TILES
eqn=2,3,+,0,1,+,/,(100),*
[DX11Gfx6]
DB*_PERF_SEL_SC_DB_TILE_TILES[0..7]
DB*_PERF_SEL_SC_DB_QUAD_KILLED_TILES[0..7]
eqn=8..15,sum8,0..7,sum8,/,(100),*

name=HiZQuadsCulled
desc=#DepthAndStencil#Percentage of quads that did not have to continue on in the pipeline after HiZ. They may be written directly to the depth buffer, or culled completely. Consistently low values here may suggest that the Z-range is not being fully utilized.
type=gpa_float64
usage=percentage
[GLGfx6]
PA_SC_QZ0_QUAD_COUNT
PA_SC_QZ1_QUAD_COUNT
PA_SC_QZ2_QUAD_COUNT
PA_SC_QZ3_QUAD_COUNT
PA_SC_P0_HIZ_QUAD_COUNT
PA_SC_P1_HIZ_QUAD_COUNT
PA_SC_P2_HIZ_QUAD_COUNT
PA_SC_P3_HIZ_QUAD_COUNT
eqn=0,1,+,2,+,3,+,4,5,+,6,+,7,+,-,0,1,+,2,+,3,+,/,(100),*
[DX11Gfx6]
PA_SC*_QZ0_QUAD_COUNT[0,1]
PA_SC*_QZ1_QUAD_COUNT[0,1]
PA_SC*_QZ2_QUAD_COUNT[0,1]
PA_SC*_QZ3_QUAD_COUNT[0,1]
PA_SC*_P0_HIZ_QUAD_COUNT[0,1]
PA_SC*_P1_HIZ_QUAD_COUNT[0,1]
PA_SC*_P2_HIZ_QUAD_COUNT[0,1]
PA_SC*_P3_HIZ_QUAD_COUNT[0,1]
eqn=0..7,sum8,8..15,sum8,-,0..7,sum8,/,(100),*

name=PreZQuadsCulled
desc=#DepthAndStencil#Percentage of quads rejected based on the detailZ and earlyZ tests.
type=gpa_float64
usage=percentage
[GLGfx6]
PA_SC_QZ0_QUAD_COUNT
PA_SC_QZ1_QUAD_COUNT
PA_SC_QZ2_QUAD_COUNT
PA_SC_QZ3_QUAD_COUNT
PA_SC_EARLYZ_QUAD_COUNT
PA_SC_P0_HIZ_QUAD_COUNT
PA_SC_P1_HIZ_QUAD_COUNT
PA_SC_P2_HIZ_QUAD_COUNT
PA_SC_P3_HIZ_QUAD_COUNT
eqn=5,6,+,7,+,8,+,4,-,0,1,+,2,+,3,+,/,(100),*
[DX11Gfx6]
PA_SC*_QZ0_QUAD_COUNT[0,1]
PA_SC*_QZ1_QUAD_COUNT[0,1]
PA_SC*_QZ2_QUAD_COUNT[0,1]
PA_SC*_QZ3_QUAD_COUNT[0,1]
PA_SC*_EARLYZ_QUAD_COUNT[0,1]
PA_SC*_P0_HIZ_QUAD_COUNT[0,1]
PA_SC*_P1_HIZ_QUAD_COUNT[0,1]
PA_SC*_P2_HIZ_QUAD_COUNT[0,1]
PA_SC*_P3_HIZ_QUAD_COUNT[0,1]
eqn=10..17,sum8,8,9,+,-,0..7,sum8,/,(100),*

name=PostZQuads
desc=#DepthAndStencil#Percentage of quads for which the pixel shader will run and may be postZ tested.
type=gpa_float64
usage=percentage
[GLGfx6]
PA_SC_EARLYZ_QUAD_COUNT
PA_SC_QZ0_QUAD_COUNT
PA_SC_QZ1_QUAD_COUNT
PA_SC_QZ2_QUAD_COUNT
PA_SC_QZ3_QUAD_COUNT
eqn=0,1,2,+,3,+,4,+,/,(100),*
[DX11Gfx6]
PA_SC*_EARLYZ_QUAD_COUNT[0,1]
PA_SC*_QZ0_QUAD_COUNT[0,1]
PA_SC*_QZ1_QUAD_COUNT[0,1]
PA_SC*_QZ2_QUAD_COUNT[0,1]
PA_SC*_QZ3_QUAD_COUNT[0,1]
eqn=0,1,+,2..9,sum8,/,(100),*

name=PreZSamplesPassing
desc=#DepthAndStencil#Number of samples tested for Z before shading and passed.
type=gpa_float64
usage=items
[GLGfx6]
DB0_PERF_SEL_PREZ_SAMPLES_PASSING_Z
DB1_PERF_SEL_PREZ_SAMPLES_PASSING_Z
eqn=0,1,+
[DX11Gfx6]
DB*_PERF_SEL_PREZ_SAMPLES_PASSING_Z[0..7]
eqn=0..7,sum8

name=PreZSamplesFailingS
desc=#DepthAndStencil#Number of samples tested for Z before shading and failed stencil test.
type=gpa_float64
usage=items
[GLGfx6]
DB0_PERF_SEL_PREZ_SAMPLES_FAILING_S
DB1_PERF_SEL_PREZ_SAMPLES_FAILING_S
eqn=0,1,+
[DX11Gfx6]
DB*_PERF_SEL_PREZ_SAMPLES_FAILING_S[0..7]
eqn=0..7,sum8

name=PreZSamplesFailingZ
desc=#DepthAndStencil#Number of samples tested for Z before shading and failed Z test.
type=gpa_float64
usage=items
[GLGfx6]
DB0_PERF_SEL_PREZ_SAMPLES_FAILING_Z
DB1_PERF_SEL_PREZ_SAMPLES_FAILING_Z
eqn=0,1,+
[DX11Gfx6]
DB*_PERF_SEL_PREZ_SAMPLES_FAILING_Z[0..7]
eqn=0..7,sum8

name=PostZSamplesPassing
desc=#DepthAndStencil#Number of samples tested for Z after shading and passed.
type=gpa_float64
usage=items
[GLGfx6]
DB0_PERF_SEL_POSTZ_SAMPLES_PASSING_Z
DB1_PERF_SEL_POSTZ_SAMPLES_PASSING_Z
eqn=0,1,+
[DX11Gfx6]
DB*_PERF_SEL_POSTZ_SAMPLES_PASSING_Z[0..7]
eqn=0..7,sum8

name=PostZSamplesFailingS
desc=#DepthAndStencil#Number of samples tested for Z after shading and failed stencil test.
type=gpa_float64
usage=items
[GLGfx6]
DB0_PERF_SEL_POSTZ_SAMPLES_FAILING_S
DB1_PERF_SEL_POSTZ_SAMPLES_FAILING_S
eqn=0,1,+
[DX11Gfx6]
DB*_PERF_SEL_POSTZ_SAMPLES_FAILING_S[0..7]
eqn=0..7,sum8

name=PostZSamplesFailingZ
desc=#DepthAndStencil#Number of samples tested for Z after shading and failed Z test.
type=gpa_float64
usage=items
[GLGfx6]
DB0_PERF_SEL_POSTZ_SAMPLES_FAILING_Z
DB1_PERF_SEL_POSTZ_SAMPLES_FAILING_Z
eqn=0,1,+
[DX11Gfx6]
DB*_PERF_SEL_POSTZ_SAMPLES_FAILING_Z[0..7]
eqn=0..7,sum8

name=ZUnitStalled
desc=#DepthAndStencil#The percentage of GPUTime the depth buffer spends waiting for the color buffer to be ready to accept data. High figures here indicate a bottleneck in color buffer operations.
type=gpa_float64
usage=percentage
[GLGfx6]
DB0_PERF_SEL_DB_CB_LQUAD_STALLS
DB1_PERF_SEL_DB_CB_LQUAD_STALLS
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,1,max,2,/,NUM_SHADER_ENGINES,/,(100),*
[DX11Gfx6]
DB*_PERF_SEL_DB_CB_LQUAD_STALLS[0..7]
GRBM_PERF_SEL_GUI_ACTIVE
eqn=0,1,max,2,max,3,max,4,max,5,max,6,max,7,max,8,/,(100),*

name=DBMemRead
desc=#DepthAndStencil#Number of bytes read from the depth buffer.
type=gpa_float64
usage=bytes
[GLGfx6]
DB0_PERF_SEL_TILE_RD_SENDS
DB1_PERF_SEL_TILE_RD_SENDS
DB0_PERF_SEL_QUAD_RD_32BYTE_REQS
DB1_PERF_SEL_QUAD_RD_32BYTE_REQS
eqn=0,1,+,(256),*,2,3,+,(32),*,+
[DX11Gfx6]
DB*_PERF_SEL_TILE_RD_SENDS[0..3]
DB*_PERF_SEL_QUAD_RD_32BYTE_REQS[0..3]
eqn=0..3,sum4,(256),*,4..7,sum4,(32),*,+

name=DBMemWritten
desc=#DepthAndStencil#Number of bytes written to the depth buffer.
type=gpa_float64
usage=bytes
[GLGfx6]
DB0_PERF_SEL_TILE_WR_SENDS
DB1_PERF_SEL_TILE_WR_SENDS
DB0_PERF_SEL_QUAD_WR_SENDS
DB1_PERF_SEL_QUAD_WR_SENDS
eqn=0,1,+,(32),*,2,3,+,(32),*,+
[DX11Gfx6]
DB*_PERF_SEL_TILE_WR_SENDS[0..3]
DB*_PERF_SEL_QUAD_WR_SENDS[0..3]
eqn=0..3,sum4,(32),*,4..7,sum4,+

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The following are new on R8xx
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;Remove this since mostly it is duplicate of the psPixelsOut and the value is not correct when profiling alone.
;name=PixelsAtCB
;desc=#ColorBuffer#Number of pixels drawn into the the color buffer.
;type=gpa_float64
;usage=items
;[GLGfx6]
;CB0_CB_PERF_SEL_DRAWN_PIXEL
;CB1_CB_PERF_SEL_DRAWN_PIXEL
;[DX11Gfx6]
;CB0_CB_PERF_SEL_DRAWN_PIXEL
;CB1_CB_PERF_SEL_DRAWN_PIXEL
;eqn=0,1,+

name=CBMemRead
desc=#ColorBuffer#Number of bytes read from the color buffer.
type=gpa_float64
usage=bytes
[GLGfx6]
CB0_PERF_SEL_CC_MC_READ_REQUEST
CB1_PERF_SEL_CC_MC_READ_REQUEST
eqn=0,1,+,(32),*
[DX11Gfx6]
CB*_PERF_SEL_CC_MC_READ_REQUEST[0..7]
eqn=0..7,sum8,(32),*

name=CBMemWritten
desc=#ColorBuffer#Number of bytes written to the color buffer.
type=gpa_float64
usage=bytes
[GLGfx6]
CB0_PERF_SEL_CC_MC_WRITE_REQUEST
CB1_PERF_SEL_CC_MC_WRITE_REQUEST
eqn=0,1,+,(32),*
[DX11Gfx6]
CB*_PERF_SEL_CC_MC_WRITE_REQUEST[0..7]
eqn=0..7,sum8,(32),*

name=CBSlowPixelPct
desc=#ColorBuffer#Percentage of pixels written to the color buffer using a half-rate or quarter-rate format.
type=gpa_float64
usage=percentage
[GLGfx6]
CB0_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT
CB1_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT
CB0_PERF_SEL_DRAWN_QUAD_FRAGMENT
CB1_PERF_SEL_DRAWN_QUAD_FRAGMENT
eqn=0,1,+,2,3,+,/,(100),*,(100),min
[DX11Gfx6]
CB*_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT[0..7]
CB*_PERF_SEL_DRAWN_QUAD_FRAGMENT[0..7]
eqn=0..7,sum8,8..15,sum8,/,(100),*,(100),min
